// Code generated by protoc-gen-go.
// source: log.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	log.proto

It has these top-level messages:
	GetStreamsRequest
	StreamInfo
	SearchRequest
	FieldFilter
	Fields
	Field
	SearchResultChunk
	SearchResult
	LogFile
	HostInfo
	JoinMeshRequest
	JoinMeshResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldFilterOperator int32

const (
	FieldFilterOperator_EQ     FieldFilterOperator = 0
	FieldFilterOperator_NOT_EQ FieldFilterOperator = 1
	FieldFilterOperator_GTE    FieldFilterOperator = 2
)

var FieldFilterOperator_name = map[int32]string{
	0: "EQ",
	1: "NOT_EQ",
	2: "GTE",
}
var FieldFilterOperator_value = map[string]int32{
	"EQ":     0,
	"NOT_EQ": 1,
	"GTE":    2,
}

func (x FieldFilterOperator) String() string {
	return proto1.EnumName(FieldFilterOperator_name, int32(x))
}
func (FieldFilterOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetStreamsRequest struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
}

func (m *GetStreamsRequest) Reset()                    { *m = GetStreamsRequest{} }
func (m *GetStreamsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetStreamsRequest) ProtoMessage()               {}
func (*GetStreamsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// StreamInfo is metadata about a stream
type StreamInfo struct {
	Host          string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	PodNamespace  string `protobuf:"bytes,2,opt,name=pod_namespace,json=podNamespace" json:"pod_namespace,omitempty"`
	PodName       string `protobuf:"bytes,3,opt,name=pod_name,json=podName" json:"pod_name,omitempty"`
	PodUid        string `protobuf:"bytes,4,opt,name=pod_uid,json=podUid" json:"pod_uid,omitempty"`
	ContainerName string `protobuf:"bytes,5,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	ContainerId   string `protobuf:"bytes,6,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *StreamInfo) Reset()                    { *m = StreamInfo{} }
func (m *StreamInfo) String() string            { return proto1.CompactTextString(m) }
func (*StreamInfo) ProtoMessage()               {}
func (*StreamInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SearchRequest struct {
	Contains     string         `protobuf:"bytes,1,opt,name=contains" json:"contains,omitempty"`
	FieldFilters []*FieldFilter `protobuf:"bytes,2,rep,name=field_filters,json=fieldFilters" json:"field_filters,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto1.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchRequest) GetFieldFilters() []*FieldFilter {
	if m != nil {
		return m.FieldFilters
	}
	return nil
}

type FieldFilter struct {
	Key   string              `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string              `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Op    FieldFilterOperator `protobuf:"varint,3,opt,name=op,enum=proto.FieldFilterOperator" json:"op,omitempty"`
}

func (m *FieldFilter) Reset()                    { *m = FieldFilter{} }
func (m *FieldFilter) String() string            { return proto1.CompactTextString(m) }
func (*FieldFilter) ProtoMessage()               {}
func (*FieldFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Fields struct {
	Fields []*Field `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *Fields) Reset()                    { *m = Fields{} }
func (m *Fields) String() string            { return proto1.CompactTextString(m) }
func (*Fields) ProtoMessage()               {}
func (*Fields) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Fields) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Field struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto1.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// SearchResult is an "batch" of search results
type SearchResultChunk struct {
	Items        []*SearchResult `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	CommonFields *Fields         `protobuf:"bytes,2,opt,name=common_fields,json=commonFields" json:"common_fields,omitempty"`
}

func (m *SearchResultChunk) Reset()                    { *m = SearchResultChunk{} }
func (m *SearchResultChunk) String() string            { return proto1.CompactTextString(m) }
func (*SearchResultChunk) ProtoMessage()               {}
func (*SearchResultChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SearchResultChunk) GetItems() []*SearchResult {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SearchResultChunk) GetCommonFields() *Fields {
	if m != nil {
		return m.CommonFields
	}
	return nil
}

// SearchResult is an individual search result
type SearchResult struct {
	Raw       []byte  `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Fields    *Fields `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
	Timestamp uint64  `protobuf:"fixed64,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto1.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SearchResult) GetFields() *Fields {
	if m != nil {
		return m.Fields
	}
	return nil
}

type LogFile struct {
	Path         string  `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Fields       *Fields `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
	LastModified int64   `protobuf:"varint,3,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	Size         int64   `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	MaxTimestamp uint64  `protobuf:"fixed64,5,opt,name=max_timestamp,json=maxTimestamp" json:"max_timestamp,omitempty"`
}

func (m *LogFile) Reset()                    { *m = LogFile{} }
func (m *LogFile) String() string            { return proto1.CompactTextString(m) }
func (*LogFile) ProtoMessage()               {}
func (*LogFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LogFile) GetFields() *Fields {
	if m != nil {
		return m.Fields
	}
	return nil
}

type HostInfo struct {
	Id  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *HostInfo) Reset()                    { *m = HostInfo{} }
func (m *HostInfo) String() string            { return proto1.CompactTextString(m) }
func (*HostInfo) ProtoMessage()               {}
func (*HostInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type JoinMeshRequest struct {
	HostInfo *HostInfo `protobuf:"bytes,1,opt,name=host_info,json=hostInfo" json:"host_info,omitempty"`
}

func (m *JoinMeshRequest) Reset()                    { *m = JoinMeshRequest{} }
func (m *JoinMeshRequest) String() string            { return proto1.CompactTextString(m) }
func (*JoinMeshRequest) ProtoMessage()               {}
func (*JoinMeshRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *JoinMeshRequest) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

type JoinMeshResponse struct {
}

func (m *JoinMeshResponse) Reset()                    { *m = JoinMeshResponse{} }
func (m *JoinMeshResponse) String() string            { return proto1.CompactTextString(m) }
func (*JoinMeshResponse) ProtoMessage()               {}
func (*JoinMeshResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto1.RegisterType((*GetStreamsRequest)(nil), "proto.GetStreamsRequest")
	proto1.RegisterType((*StreamInfo)(nil), "proto.StreamInfo")
	proto1.RegisterType((*SearchRequest)(nil), "proto.SearchRequest")
	proto1.RegisterType((*FieldFilter)(nil), "proto.FieldFilter")
	proto1.RegisterType((*Fields)(nil), "proto.Fields")
	proto1.RegisterType((*Field)(nil), "proto.Field")
	proto1.RegisterType((*SearchResultChunk)(nil), "proto.SearchResultChunk")
	proto1.RegisterType((*SearchResult)(nil), "proto.SearchResult")
	proto1.RegisterType((*LogFile)(nil), "proto.LogFile")
	proto1.RegisterType((*HostInfo)(nil), "proto.HostInfo")
	proto1.RegisterType((*JoinMeshRequest)(nil), "proto.JoinMeshRequest")
	proto1.RegisterType((*JoinMeshResponse)(nil), "proto.JoinMeshResponse")
	proto1.RegisterEnum("proto.FieldFilterOperator", FieldFilterOperator_name, FieldFilterOperator_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for LogServer service

type LogServerClient interface {
	GetStreams(ctx context.Context, in *GetStreamsRequest, opts ...grpc.CallOption) (LogServer_GetStreamsClient, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LogServer_SearchClient, error)
}

type logServerClient struct {
	cc *grpc.ClientConn
}

func NewLogServerClient(cc *grpc.ClientConn) LogServerClient {
	return &logServerClient{cc}
}

func (c *logServerClient) GetStreams(ctx context.Context, in *GetStreamsRequest, opts ...grpc.CallOption) (LogServer_GetStreamsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LogServer_serviceDesc.Streams[0], c.cc, "/proto.LogServer/GetStreams", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServerGetStreamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogServer_GetStreamsClient interface {
	Recv() (*StreamInfo, error)
	grpc.ClientStream
}

type logServerGetStreamsClient struct {
	grpc.ClientStream
}

func (x *logServerGetStreamsClient) Recv() (*StreamInfo, error) {
	m := new(StreamInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LogServer_SearchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LogServer_serviceDesc.Streams[1], c.cc, "/proto.LogServer/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServerSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogServer_SearchClient interface {
	Recv() (*SearchResultChunk, error)
	grpc.ClientStream
}

type logServerSearchClient struct {
	grpc.ClientStream
}

func (x *logServerSearchClient) Recv() (*SearchResultChunk, error) {
	m := new(SearchResultChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LogServer service

type LogServerServer interface {
	GetStreams(*GetStreamsRequest, LogServer_GetStreamsServer) error
	Search(*SearchRequest, LogServer_SearchServer) error
}

func RegisterLogServerServer(s *grpc.Server, srv LogServerServer) {
	s.RegisterService(&_LogServer_serviceDesc, srv)
}

func _LogServer_GetStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStreamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServerServer).GetStreams(m, &logServerGetStreamsServer{stream})
}

type LogServer_GetStreamsServer interface {
	Send(*StreamInfo) error
	grpc.ServerStream
}

type logServerGetStreamsServer struct {
	grpc.ServerStream
}

func (x *logServerGetStreamsServer) Send(m *StreamInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _LogServer_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServerServer).Search(m, &logServerSearchServer{stream})
}

type LogServer_SearchServer interface {
	Send(*SearchResultChunk) error
	grpc.ServerStream
}

type logServerSearchServer struct {
	grpc.ServerStream
}

func (x *logServerSearchServer) Send(m *SearchResultChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _LogServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogServer",
	HandlerType: (*LogServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreams",
			Handler:       _LogServer_GetStreams_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _LogServer_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for MeshService service

type MeshServiceClient interface {
	JoinMesh(ctx context.Context, in *JoinMeshRequest, opts ...grpc.CallOption) (*JoinMeshResponse, error)
}

type meshServiceClient struct {
	cc *grpc.ClientConn
}

func NewMeshServiceClient(cc *grpc.ClientConn) MeshServiceClient {
	return &meshServiceClient{cc}
}

func (c *meshServiceClient) JoinMesh(ctx context.Context, in *JoinMeshRequest, opts ...grpc.CallOption) (*JoinMeshResponse, error) {
	out := new(JoinMeshResponse)
	err := grpc.Invoke(ctx, "/proto.MeshService/JoinMesh", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MeshService service

type MeshServiceServer interface {
	JoinMesh(context.Context, *JoinMeshRequest) (*JoinMeshResponse, error)
}

func RegisterMeshServiceServer(s *grpc.Server, srv MeshServiceServer) {
	s.RegisterService(&_MeshService_serviceDesc, srv)
}

func _MeshService_JoinMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).JoinMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeshService/JoinMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).JoinMesh(ctx, req.(*JoinMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MeshService",
	HandlerType: (*MeshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinMesh",
			Handler:    _MeshService_JoinMesh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("log.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x52, 0xd3, 0x40,
	0x14, 0x26, 0x2d, 0x0d, 0xed, 0x69, 0x0a, 0xe5, 0xc0, 0x48, 0xed, 0x78, 0xa1, 0xab, 0x8e, 0xc8,
	0x30, 0xe8, 0xc4, 0x0b, 0x6f, 0x64, 0xbc, 0x70, 0x00, 0x71, 0xf8, 0x19, 0x03, 0x5e, 0x67, 0x56,
	0xb2, 0xa5, 0x19, 0x92, 0x6c, 0xcc, 0x6e, 0xf1, 0xe7, 0x09, 0x7c, 0x0e, 0x5f, 0xc5, 0x17, 0x73,
	0xff, 0xd2, 0x76, 0x80, 0x71, 0xb8, 0xca, 0xd9, 0xf3, 0x9d, 0x9f, 0xef, 0x9c, 0x7c, 0xbb, 0xd0,
	0xc9, 0xf8, 0xe5, 0x4e, 0x59, 0x71, 0xc9, 0xb1, 0x65, 0x3e, 0xe4, 0x05, 0xac, 0x1e, 0x30, 0x79,
	0x26, 0x2b, 0x46, 0x73, 0x11, 0xb1, 0x6f, 0x13, 0x26, 0x24, 0x22, 0x2c, 0x8e, 0xb9, 0x90, 0x03,
	0xef, 0xb1, 0xb7, 0xd9, 0x89, 0x8c, 0x4d, 0xfe, 0x7a, 0x00, 0x36, 0xec, 0xb0, 0x18, 0xf1, 0xbb,
	0x42, 0xf0, 0x29, 0xf4, 0x4a, 0x9e, 0xc4, 0x05, 0xcd, 0x99, 0x28, 0xe9, 0x05, 0x1b, 0x34, 0x0c,
	0x18, 0x28, 0xe7, 0x49, 0xed, 0xc3, 0x87, 0xd0, 0xae, 0x83, 0x06, 0x4d, 0x83, 0x2f, 0x39, 0x1c,
	0x37, 0x40, 0x9b, 0xf1, 0x24, 0x4d, 0x06, 0x8b, 0x06, 0xf1, 0xd5, 0xf1, 0x4b, 0x9a, 0xe0, 0x73,
	0x58, 0xbe, 0xe0, 0x85, 0xa4, 0x69, 0xc1, 0x2a, 0x9b, 0xd9, 0x32, 0x78, 0x6f, 0xea, 0x35, 0xf9,
	0x4f, 0x20, 0x98, 0x85, 0xa9, 0x22, 0xbe, 0x09, 0xea, 0x4e, 0x7d, 0x87, 0x09, 0x49, 0xa0, 0x77,
	0xc6, 0x68, 0x75, 0x31, 0xae, 0x47, 0x1d, 0x42, 0xdb, 0xe1, 0xc2, 0xcd, 0x32, 0x3d, 0xe3, 0x5b,
	0xe8, 0x8d, 0x52, 0x96, 0x25, 0xf1, 0x28, 0xcd, 0x24, 0xab, 0x84, 0x9a, 0xa7, 0xb9, 0xd9, 0x0d,
	0xd1, 0x6e, 0x70, 0x67, 0x5f, 0x63, 0xfb, 0x06, 0x8a, 0x82, 0xd1, 0xec, 0x20, 0x08, 0x85, 0xee,
	0x1c, 0x88, 0x7d, 0x68, 0x5e, 0xb1, 0x9f, 0xae, 0xbc, 0x36, 0x71, 0x1d, 0x5a, 0xd7, 0x34, 0x9b,
	0xd4, 0x1b, 0xb2, 0x07, 0xdc, 0x82, 0x06, 0x2f, 0xcd, 0x52, 0x96, 0xc3, 0xe1, 0xed, 0x26, 0xa7,
	0x25, 0xab, 0xa8, 0xe4, 0x55, 0xa4, 0xa2, 0xc8, 0x0e, 0xf8, 0x06, 0x12, 0xf8, 0x0c, 0x7c, 0xd3,
	0x5c, 0xf3, 0xd7, 0xf4, 0x82, 0xf9, 0xcc, 0xc8, 0x61, 0xe4, 0x15, 0xb4, 0x8c, 0xe3, 0xbe, 0x64,
	0x48, 0x05, 0xab, 0xf5, 0xa6, 0xc4, 0x24, 0x93, 0x1f, 0xc6, 0x93, 0xe2, 0x0a, 0x5f, 0x42, 0x2b,
	0x95, 0x2c, 0xaf, 0x5b, 0xad, 0xb9, 0x56, 0xf3, 0x81, 0x91, 0x8d, 0xc0, 0x10, 0xd4, 0xdf, 0xc9,
	0x73, 0x5e, 0xc4, 0x8e, 0x9d, 0xae, 0xde, 0x0d, 0x7b, 0xf3, 0xec, 0x44, 0x14, 0xd8, 0x18, 0x7b,
	0x22, 0x0c, 0x82, 0xf9, 0x52, 0x9a, 0x6b, 0x45, 0xbf, 0x1b, 0xae, 0x41, 0xa4, 0x4d, 0xa5, 0x04,
	0xff, 0x7f, 0xe5, 0x1c, 0x88, 0x8f, 0xa0, 0x23, 0x53, 0xa5, 0x38, 0x49, 0x73, 0xbb, 0x50, 0x3f,
	0x9a, 0x39, 0xc8, 0x1f, 0x0f, 0x96, 0x8e, 0xf8, 0xa5, 0xda, 0x2a, 0xd3, 0x3a, 0x2e, 0xa9, 0x1c,
	0xd7, 0x3a, 0xd6, 0xf6, 0x7d, 0x9b, 0x28, 0xb9, 0x67, 0x54, 0xc8, 0x38, 0xe7, 0x49, 0xaa, 0x5c,
	0x89, 0x69, 0xd4, 0x8c, 0x02, 0xed, 0x3c, 0x76, 0x3e, 0x5d, 0x5f, 0xa4, 0xbf, 0x98, 0x11, 0x74,
	0x33, 0x32, 0xb6, 0x4e, 0xcc, 0xe9, 0x8f, 0x78, 0xc6, 0xb0, 0x65, 0x18, 0x06, 0xca, 0x79, 0x3e,
	0x25, 0xb9, 0x0d, 0xed, 0x8f, 0xea, 0x52, 0x99, 0xcb, 0xb6, 0x0c, 0x0d, 0x25, 0x67, 0x4b, 0x51,
	0x59, 0x7a, 0x2f, 0x93, 0x2a, 0x73, 0xff, 0x4b, 0x9b, 0xe4, 0x3d, 0xac, 0x7c, 0xe2, 0x69, 0x71,
	0xcc, 0xc4, 0x54, 0xd9, 0xdb, 0xd0, 0xd1, 0xb7, 0x32, 0x4e, 0x55, 0x05, 0x93, 0xdb, 0x0d, 0x57,
	0xdc, 0x20, 0x75, 0xe1, 0xa8, 0x3d, 0x76, 0x16, 0x41, 0xe8, 0xcf, 0x0a, 0x88, 0x92, 0x17, 0x82,
	0x6d, 0x85, 0xb0, 0x76, 0x87, 0xfc, 0xd0, 0x87, 0xc6, 0xde, 0xe7, 0xfe, 0x02, 0x02, 0xf8, 0x27,
	0xa7, 0xe7, 0xb1, 0xb2, 0x3d, 0x5c, 0x82, 0xe6, 0xc1, 0xf9, 0x5e, 0xbf, 0x11, 0xfe, 0xf6, 0xa0,
	0xa3, 0x76, 0x7b, 0xc6, 0xaa, 0x6b, 0xa5, 0xfc, 0x5d, 0x80, 0xd9, 0xeb, 0x82, 0x03, 0xd7, 0xfe,
	0xd6, 0x83, 0x33, 0x5c, 0xad, 0x85, 0x34, 0x7d, 0x60, 0xc8, 0xc2, 0x6b, 0x0f, 0xdf, 0x81, 0x6f,
	0xf5, 0x80, 0xeb, 0x37, 0x94, 0x66, 0xd3, 0x06, 0x77, 0xe8, 0xcf, 0x08, 0x55, 0x67, 0x87, 0x47,
	0xd0, 0xd5, 0xe3, 0x68, 0x2a, 0xa9, 0x7a, 0x78, 0x76, 0xa1, 0x5d, 0x4f, 0x88, 0x0f, 0x5c, 0xe2,
	0x8d, 0x9d, 0x0d, 0x37, 0x6e, 0xf9, 0xed, 0x2a, 0xc8, 0xc2, 0x57, 0xdf, 0x20, 0x6f, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x98, 0x92, 0x5a, 0x78, 0x43, 0x05, 0x00, 0x00,
}
